{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PokemonRow","pokemon","onClick","name","english","type","join","Button","variant","color","id","PokemonInfo","base","Object","keys","map","key","Title","styled","h1","PageContainer","div","TwoColumnLayout","Input","input","App","React","useState","filter","filterSet","pokemonSet","selectedPokemon","selectedPokemonSet","useEffect","fetch","then","resp","json","data","CssBaseline","value","onChange","evt","target","width","toLocaleLowerCase","includes","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ivBA0BA,IAAMA,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,QAAZ,OACjB,mCACE,+BACE,6BAAKD,EAAQE,KAAKC,UAClB,6BAAKH,EAAQI,KAAKC,KAAK,QACvB,6BACE,cAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNP,QAAS,kBAAMA,EAAQD,IAHzB,kCAJKA,EAAQS,OAoBfC,EAAc,SAAC,GAAD,IAAWP,EAAX,EAAGD,KAAQC,QAAWQ,EAAtB,EAAsBA,KAAtB,OAClB,gCACE,6BAAKR,IACL,gCACE,gCACGS,OAAOC,KAAKF,GAAMG,KAAI,SAACC,GAAD,OACrB,+BACE,6BAAKA,IACL,6BAAKJ,EAAKI,OAFHA,cAYbC,EAAQC,IAAOC,GAAV,KAGLC,EAAgBF,IAAOG,IAAV,KAKbC,EAAkBJ,IAAOG,IAAV,KAKfE,EAAQL,IAAOM,MAAV,KAwDIC,MAlDf,WAAgB,IAAD,EACeC,IAAMC,SAAS,IAD9B,mBACNC,EADM,KACEC,EADF,OAEiBH,IAAMC,SAAS,MAFhC,mBAEN1B,EAFM,KAEG6B,EAFH,OAGiCJ,IAAMC,SAAS,MAHhD,mBAGNI,EAHM,KAGWC,EAHX,KAWb,OANAN,IAAMO,WAAU,WACdC,MAAM,0BACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OAAUR,EAAWQ,QAC5B,IAEErC,EAKH,eAACmB,EAAD,WACE,cAACmB,EAAA,EAAD,IACA,cAACtB,EAAD,6BACA,eAACK,EAAD,WACE,gCACE,cAACC,EAAD,CACElB,KAAK,OACLmC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAASb,EAAUa,EAAIC,OAAOH,UAE1C,uBAAOI,MAAM,OAAb,SACE,gCACG3C,EACE2B,QAAO,qBAAGzB,KAAQC,QAEdyC,oBACAC,SAASlB,EAAOiB,wBAEpBE,MAAM,EAAG,IACThC,KAAI,SAACd,GAAD,OACH,cAAC,EAAD,CACEA,QAASA,EACTC,QAAS,SAACD,GAAD,OAAa+B,EAAmB/B,gBAMpD8B,GAAmB,cAAC,EAAD,eAAiBA,UAhClC,gDCrFIiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ef4a59c3.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"@emotion/styled\";\nimport { Button, CssBaseline } from \"@material-ui/core\";\n\nimport \"./App.css\";\n\nconst PokemonType = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.shape({\n    english: PropTypes.string.isRequired,\n    japanese: PropTypes.string.isRequired,\n    chinese: PropTypes.string.isRequired,\n    french: PropTypes.string.isRequired,\n  }),\n  type: PropTypes.arrayOf(PropTypes.string.isRequired),\n  base: PropTypes.shape({\n    HP: PropTypes.number.isRequired,\n    Attack: PropTypes.number.isRequired,\n    Defense: PropTypes.number.isRequired,\n    \"Sp. Attack\": PropTypes.number.isRequired,\n    \"Sp. Defense\": PropTypes.number.isRequired,\n    Speed: PropTypes.number.isRequired,\n  }),\n});\n\nconst PokemonRow = ({ pokemon, onClick }) => (\n  <>\n    <tr key={pokemon.id}>\n      <td>{pokemon.name.english}</td>\n      <td>{pokemon.type.join(\", \")}</td>\n      <td>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => onClick(pokemon)}\n        >\n          More Information\n        </Button>\n      </td>\n    </tr>\n  </>\n);\n\nPokemonRow.propTypes = {\n  pokemon: PropTypes.arrayOf(PokemonType),\n};\n\nconst PokemonInfo = ({ name: { english }, base }) => (\n  <div>\n    <h2>{english}</h2>\n    <table>\n      <tbody>\n        {Object.keys(base).map((key) => (\n          <tr key={key}>\n            <td>{key}</td>\n            <td>{base[key]}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n\nPokemonInfo.propTypes = PokemonType;\n\nconst Title = styled.h1`\n  text-align: center;\n`;\nconst PageContainer = styled.div`\n  margin: auto;\n  width: 800px;\n  padding-top: 1em;\n`;\nconst TwoColumnLayout = styled.div`\n  display: grid;\n  grid-template-columns: 80% 20%;\n  grid-column-gap: 1rem;\n`;\nconst Input = styled.input`\n  width: 100%;\n  padding: 0.2rem;\n  font-size: large;\n`;\n\nfunction App() {\n  const [filter, filterSet] = React.useState(\"\");\n  const [pokemon, pokemonSet] = React.useState(null);\n  const [selectedPokemon, selectedPokemonSet] = React.useState(null);\n\n  React.useEffect(() => {\n    fetch(\"/comienzo/pokemon.json\")\n      .then((resp) => resp.json())\n      .then((data) => pokemonSet(data));\n  }, []);\n\n  if (!pokemon) {\n    return <div>Loading data</div>;\n  }\n\n  return (\n    <PageContainer>\n      <CssBaseline />\n      <Title>Pokemon Search</Title>\n      <TwoColumnLayout>\n        <div>\n          <Input\n            type=\"text\"\n            value={filter}\n            onChange={(evt) => filterSet(evt.target.value)}\n          />\n          <table width=\"100%\">\n            <tbody>\n              {pokemon\n                .filter(({ name: { english } }) =>\n                  english\n                    .toLocaleLowerCase()\n                    .includes(filter.toLocaleLowerCase())\n                )\n                .slice(0, 20)\n                .map((pokemon) => (\n                  <PokemonRow\n                    pokemon={pokemon}\n                    onClick={(pokemon) => selectedPokemonSet(pokemon)}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n        {selectedPokemon && <PokemonInfo {...selectedPokemon} />}\n      </TwoColumnLayout>\n    </PageContainer>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}