{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PokemonRow","pokemon","onClick","name","english","type","join","id","PokemonInfo","base","Object","keys","map","key","App","React","useState","filter","filterSet","pokemonSet","selectedPokemon","selectedPokemonSet","useEffect","fetch","then","resp","json","data","style","margin","width","paddingTop","className","display","gridTemplateColumns","gridColumnGap","value","onChange","evt","target","toLocaleLowerCase","includes","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAwBMA,G,MAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,QAAZ,OACjB,mCACE,+BACE,6BAAKD,EAAQE,KAAKC,UAClB,6BAAKH,EAAQI,KAAKC,KAAK,QACvB,6BACE,wBAAQJ,QAAS,kBAAMA,EAAQD,IAA/B,uBAJKA,EAAQM,QAcfC,EAAc,SAAC,GAAD,IAAWJ,EAAX,EAAGD,KAAQC,QAAWK,EAAtB,EAAsBA,KAAtB,OAClB,gCACE,6BAAKL,IACL,gCACE,gCACGM,OAAOC,KAAKF,GAAMG,KAAI,SAACC,GAAD,OACrB,+BACE,6BAAKA,IACL,6BAAKJ,EAAKI,OAFHA,cAyEJC,MA7Df,WAAgB,IAAD,EACeC,IAAMC,SAAS,IAD9B,mBACNC,EADM,KACEC,EADF,OAEiBH,IAAMC,SAAS,MAFhC,mBAENf,EAFM,KAEGkB,EAFH,OAGiCJ,IAAMC,SAAS,MAHhD,mBAGNI,EAHM,KAGWC,EAHX,KAWb,OANAN,IAAMO,WAAU,WACdC,MAAM,gCACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OAAUR,EAAWQ,QAC5B,IAEE1B,EAKH,sBACE2B,MAAO,CACLC,OAAQ,OACRC,MAAO,IACPC,WAAY,OAJhB,UAOE,oBAAIC,UAAU,QAAd,4BACA,sBACEJ,MAAO,CACLK,QAAS,OACTC,oBAAqB,UACrBC,cAAe,QAJnB,UAOE,gCACE,uBACE9B,KAAK,OACL+B,MAAOnB,EACPoB,SAAU,SAACC,GAAD,OAASpB,EAAUoB,EAAIC,OAAOH,UAE1C,uBAAON,MAAM,OAAb,SACE,gCACG7B,EACEgB,QAAO,qBAAGd,KAAQC,QAEdoC,oBACAC,SAASxB,EAAOuB,wBAEpBE,MAAM,EAAG,IACT9B,KAAI,SAACX,GAAD,OACH,cAAC,EAAD,CACEA,QAASA,EACTC,QAAS,SAACD,GAAD,OAAaoB,EAAmBpB,gBAMpDmB,GAAmB,cAAC,EAAD,eAAiBA,UA3ClC,gDC1DIuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b90cc54b.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./App.css\";\n\nconst PokemonType = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.shape({\n    english: PropTypes.string.isRequired,\n    japanese: PropTypes.string.isRequired,\n    chinese: PropTypes.string.isRequired,\n    french: PropTypes.string.isRequired,\n  }),\n  type: PropTypes.arrayOf(PropTypes.string.isRequired),\n  base: PropTypes.shape({\n    HP: PropTypes.number.isRequired,\n    Attack: PropTypes.number.isRequired,\n    Defense: PropTypes.number.isRequired,\n    \"Sp. Attack\": PropTypes.number.isRequired,\n    \"Sp. Defense\": PropTypes.number.isRequired,\n    Speed: PropTypes.number.isRequired,\n  }),\n});\n\nconst PokemonRow = ({ pokemon, onClick }) => (\n  <>\n    <tr key={pokemon.id}>\n      <td>{pokemon.name.english}</td>\n      <td>{pokemon.type.join(\", \")}</td>\n      <td>\n        <button onClick={() => onClick(pokemon)}> Tnfo</button>\n      </td>\n    </tr>\n  </>\n);\n\nPokemonRow.propTypes = {\n  pokemon: PropTypes.arrayOf(PokemonType),\n};\n\nconst PokemonInfo = ({ name: { english }, base }) => (\n  <div>\n    <h2>{english}</h2>\n    <table>\n      <tbody>\n        {Object.keys(base).map((key) => (\n          <tr key={key}>\n            <td>{key}</td>\n            <td>{base[key]}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n\nPokemonInfo.propTypes = PokemonType;\n\nfunction App() {\n  const [filter, filterSet] = React.useState(\"\");\n  const [pokemon, pokemonSet] = React.useState(null);\n  const [selectedPokemon, selectedPokemonSet] = React.useState(null);\n\n  React.useEffect(() => {\n    fetch(\"/starting-react/pokemon.json\")\n      .then((resp) => resp.json())\n      .then((data) => pokemonSet(data));\n  }, []);\n\n  if (!pokemon) {\n    return <div>Loading data</div>;\n  }\n\n  return (\n    <div\n      style={{\n        margin: \"auto\",\n        width: 800,\n        paddingTop: \"1em\",\n      }}\n    >\n      <h1 className=\"title\">Pokemon Search</h1>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: \"80% 20%\",\n          gridColumnGap: \"1rem\",\n        }}\n      >\n        <div>\n          <input\n            type=\"text\"\n            value={filter}\n            onChange={(evt) => filterSet(evt.target.value)}\n          />\n          <table width=\"100%\">\n            <tbody>\n              {pokemon\n                .filter(({ name: { english } }) =>\n                  english\n                    .toLocaleLowerCase()\n                    .includes(filter.toLocaleLowerCase())\n                )\n                .slice(0, 20)\n                .map((pokemon) => (\n                  <PokemonRow\n                    pokemon={pokemon}\n                    onClick={(pokemon) => selectedPokemonSet(pokemon)}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n        {selectedPokemon && <PokemonInfo {...selectedPokemon} />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}